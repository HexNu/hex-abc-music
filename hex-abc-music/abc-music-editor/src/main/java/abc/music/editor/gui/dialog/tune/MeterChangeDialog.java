package abc.music.editor.gui.dialog.tune;

import abc.music.core.domain.Meter;
import abc.music.core.domain.Tune;
import abc.music.core.domain.Voice;
import abc.music.editor.AbcMusicEditor;
import abc.music.editor.gui.dialog.AmeDialog;
import javax.swing.SpinnerListModel;

/**
 *
 * @author hl
 */
public class MeterChangeDialog extends AmeDialog<Meter> {

    private final Voice voice;

    public MeterChangeDialog(AbcMusicEditor editor, Voice voice) {
        super(editor, "Change Meter");
        this.voice = voice;
        setValues();
    }

    @Override
    protected void init() {
        initComponents();
        meterDenominatorSpinner.setModel(new SpinnerListModel(new Integer[]{1, 2, 4, 8, 16, 32}));
    }

    private void setValues() {
        Tune tune = voice.getTune();
        meterNumeratorSpinner.setValue(tune.getMeter().getNumerator());
        meterDenominatorSpinner.setValue(tune.getMeter().getDenominator());
        useSymbolCheckBox.setSelected(tune.getMeter().useSymbol());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doneButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        meterDenominatorSpinner = new javax.swing.JSpinner();
        meterNumeratorSpinner = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        useSymbolCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        meterDenominatorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                meterDenominatorSpinnerStateChanged(evt);
            }
        });

        meterNumeratorSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 1, 15, 1));
        meterNumeratorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                meterNumeratorSpinnerStateChanged(evt);
            }
        });

        jLabel8.setText("/");

        jLabel7.setText("Meter:");

        useSymbolCheckBox.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(meterNumeratorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(meterDenominatorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(useSymbolCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(meterNumeratorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(meterDenominatorSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(useSymbolCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doneButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancel();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        ok();
    }//GEN-LAST:event_doneButtonActionPerformed

    private void meterDenominatorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_meterDenominatorSpinnerStateChanged
        checkMeter();
    }//GEN-LAST:event_meterDenominatorSpinnerStateChanged

    private void meterNumeratorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_meterNumeratorSpinnerStateChanged
        checkMeter();
    }//GEN-LAST:event_meterNumeratorSpinnerStateChanged

    @Override
    protected void accept() {
        Meter meter = new Meter();
        meter.setNumerator((Integer) meterNumeratorSpinner.getValue());
        meter.setDenominator((Integer) meterDenominatorSpinner.getValue());
        meter.setUseSymbol(useSymbolCheckBox.isSelected());
        set(meter);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSpinner meterDenominatorSpinner;
    private javax.swing.JSpinner meterNumeratorSpinner;
    private javax.swing.JCheckBox useSymbolCheckBox;
    // End of variables declaration//GEN-END:variables

    private void checkMeter() {
        Integer numerator = (Integer) meterNumeratorSpinner.getValue();
        Integer denominator = (Integer) meterDenominatorSpinner.getValue();
        if (denominator == 4 && numerator == 4) {
            useSymbolCheckBox.setText("Use C ?");
            useSymbolCheckBox.setToolTipText("<html>Check this if you want to use<br>"
                    + " <b>C</b> instead of 4/4");
            useSymbolCheckBox.setEnabled(true);
        } else if (denominator == 2 && numerator == 2) {
            useSymbolCheckBox.setText("Use ₵ ?");
            useSymbolCheckBox.setToolTipText("<html>Check this if you want to use<br>"
                    + " <b>₵</b> instead of 2/2");
            useSymbolCheckBox.setEnabled(true);
        } else {
            useSymbolCheckBox.setText("");
            useSymbolCheckBox.setToolTipText("");
            useSymbolCheckBox.setEnabled(false);
        }
    }
}
