package abc.music.editor.gui.dialog;

import abc.music.core.ProjectCarrier;
import abc.music.core.domain.Tune;
import abc.music.editor.AbcMusicEditor;
import abc.music.editor.gui.AmePanel;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import nu.hex.abc.music.service.Service;

/**
 *
 * @author hl
 */
public class TuneSelectorPanel extends AmePanel implements PropertyChangeListener {

    ProjectCarrier carrier;
    private final TunesFromOtherProjectChooser fileChooser;

    public TuneSelectorPanel(AbcMusicEditor editor, TunesFromOtherProjectChooser fileChooser) {
        super(editor, "Select Tunes");
        this.fileChooser = fileChooser;
        setup();
    }

    private void setup() {
        fileChooser.addPropertyChangeListener(this);
    }

    @Override
    protected void init() {
        initComponents();
    }

    public void updatePanel() {
        tunesPanel.removeAll();
        parseTunes();
    }

    @Override
    public void propertyChange(PropertyChangeEvent e) {
        String propertyName = e.getPropertyName();
        if (JFileChooser.DIRECTORY_CHANGED_PROPERTY.equals(propertyName)) {
            repaint();
        } else if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(propertyName)) {
            File file = (File) e.getNewValue();
            if (file == null) {
                repaint();
                return;
            }
            carrier = Service.extractTunesAndPersons(file);
            updatePanel();
        }
    }

    private void parseTunes() {
        carrier.tunes.stream().forEach((tune) -> {
            tunesPanel.add(new TuneItem(tune));
        });
        tunesPanel.repaint();
        tunesPanel.revalidate();
    }

    public List<Tune> getTunes() {
        List<Tune> result = new ArrayList<>();
        for (Component c : tunesPanel.getComponents()) {
            TuneItem item = (TuneItem) c;
            if (item.isSelected()) {
                result.add(item.getTune());
            }
        }
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tunesPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(320, 200));
        jScrollPane1.setName(""); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 250));

        tunesPanel.setBackground(java.awt.Color.white);
        tunesPanel.setLayout(new javax.swing.BoxLayout(tunesPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(tunesPanel);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel tunesPanel;
    // End of variables declaration//GEN-END:variables

    private class TuneItem extends JCheckBox {

        private final Tune tune;

        public TuneItem(Tune tune) {
            super(tune.getName());
            this.tune = tune;
        }

        public Tune getTune() {
            return tune;
        }
    }
}
